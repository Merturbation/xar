#labels pyxar,api
# The pyxar class for reading and writing xar archive files.

= XarArchive =

  This is the class for reading and writing to xar archive files.

  == XarArchive(name, mode = 'r') ==

  Open a xar archive file of the given name in either write mode ('w') or read mode ('r'). If no mode is specified, read is the default.

  {{{
  import xarfile
  xarfile.XarArchive('myarchive.xar', 'w')
  }}}

  == open() ==

  Open the xar archive. This method is called implicitly on archive creation.

  == close() ==

  Close the xar archive. This method is called implicitly on object deletion, if the archive is not closed prior.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')
  myxar.close()
  }}}

  == getmembers() ==

  Returns the list of members of the archive file as a list of XarInfo objects.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')
  member_list = myxar.getmembers()
  }}}

  == getmember(name) ==

  Returns a XarInfo object corrosponding to the member of the archive file with the given name. If no member of the archive has this name, it will raise a KeyError.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')
  foo = myxar.getmember("foo.txt")
  }}}

  == getnames() ==

  Returns a the names of all members of the archive file as a list.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')
  name_list = myxar.getnames()
  }}}

  == getsubdoc(name) ==

  Return a XarSubdoc object for the subdoc of the given name.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')
  mysubdoc = myxar.getsubddoc('mysubdoc')
  }}}

  == getsubdocs() ==

  Return a list of XarSubdoc objects for each subdoc in the archive.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')
  subdocs = myxar.getsubdocs()
  }}}

  == getsubdocnames() ==

  Return a list of the names of each subdoc in the archive.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')
  subdoc_name_list = myxar.getsubdocnames()
  }}}

  == extract(member = None, path = None) ==

  Extract the member to the given path, or the current directory if no path is given. If no member is given, every file in the archive is extracted to the given path, or the current directory.

  NOTE Extraction to a specific path is not yet implemented, and a NotImplementedError will be raised if a path is given.

  {{{ 
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar')

  # Extract foo.txt to the current directory
  myxar.extract("foo.txt")

  # Extract everything to the current directory
  myxar.extract()
  }}}

  == add(name, recursive = True) ==

  Add a file (or directory) to the archive, if the archive is writable. If the name is a directory, and recursive is True, then add the directory recursively. A XarError is raised if the archive is not writable.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar', 'w')

  # Add a single file
  myxar.add('foo.txt')

  # Add a directory recursively
  myxar.add('myfolder')

  # Add a directory only, without recursing
  myxar.add('myfolder', False)
  }}}

  == addsubdoc(subdoc) ==

  Adds the given subdoc to the xar archive. Subdoc is assumed to be an instance of XarSubdoc or a subclass, but if not, it is assumed to be a path to an xml file that can be used to create a XarSubdoc instance.

  {{{
  import xarfile
  myxar = xarfile.XarArchive('myarchive.xar', 'w')

  # Add a subdoc file
  myxar.addsubdoc('foo.xml')

  # Add a XarSubdoc instance
  mysubdoc = XarSubdoc('mysubdoc', 'mysubdoc.xml')
  myxar.addsubdoc(mysubdoc)
  }}}





